package org.evgeny;


import org.evgeny.Model.GameShortInformationModel;
import org.evgeny.Service.GameShortService;
import org.evgeny.Util.GetProperties;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class TelegramBot extends TelegramLongPollingBot {

    private final String WAIT = "waiting_input_game";
    private final String NAME_BOT = "bot.name";
    private Map<Long, String> userStates = new ConcurrentHashMap<>();
    private final GameShortService gameShortService = GameShortService.getInstance();


    public TelegramBot(String token) {
        super(token);
    }

    @Override
    public void onUpdateReceived(Update update) {
        //If user has chosen steam option
        if (update.hasCallbackQuery()) {
            handleCallBack(update.getCallbackQuery());
            return;
        }

        if (update.hasMessage() && update.getMessage().hasText() || update.hasCallbackQuery()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getFrom().getUserName();

            if (userStates.containsKey(chatId) && userStates.get(chatId).equals(WAIT)) {
                userStates.remove(chatId);
                processedAddButtonClick(chatId, messageText);
                return;
            }


            switch (messageText) {
                case "/start": {
                    startCommandReceived(chatId, userName);
                    break;
                }
                case "–§–∏–ª—å–º—ã": {
                   // films(chatId, userName);
                    break;
                }
                case "Steam": {
                    sendKeyboardSteam(chatId);
                    break;
                }
                case "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": {
                    sendKeyboardSteam(chatId);
                    break;
                }
                default: {
                    sendKeyboardReplyKeyboard(chatId);
                    break;
                }
            }
        }

    }

    private void handleCallBack(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        long userId = callbackQuery.getFrom().getId();
        userStates.put(userId, WAIT);

        switch (data) {
            case "add":
                sendMessage(userId, """
                        ‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ*, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –µ–µ –Ω–∞–π—Ç–∏ –≤ Steam, \s
                        –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–µ *—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä* (App ID). \s
                        
                        üîç –£–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç: [SteamDB](https://steamdb.info/apps/).
                        """);
                break;

            case "look":
                sendMessage(userId, String.valueOf(userId) + data);
                break;

            case "delete":
                sendMessage(userId, String.valueOf(userId) + data);
                break;
        }


    }

    private void processedAddButtonClick(long userId, String gameName) {
        sendMessage(userId, """
                    üïµÔ∏è *–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä—ã...* \s
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ. \s
                """);
        try {
            GameShortInformationModel correctGameName = gameShortService.isCorrectGameName(gameName);
            if (correctGameName != null) {
                sendMessage(userId, """
                        ‚úÖ *–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!* \s
                        üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *%s* üéÆ \s
                        üÜî ID: *%s* \s
                        """.formatted(correctGameName.getName(), correctGameName.getAppid()));
            }
            else {
                sendMessage(userId, """
                        ‚ùå *–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!* \s
                        üîé –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ç–∞–∫–æ–π –∏–≥—Ä—ã –≤ Steam –Ω–µ—Ç. \s
                        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. \s
                        """);
            }
        }
        catch (Exception e) {
            sendMessage(userId, """
                    ‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞!* \s
                    ‚è≥ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \s
                    """);
        }
    }

    private void startCommandReceived(Long chatId, String name) {
        String answer = """
                –ü—Ä–∏–≤–µ—Ç, *%s*! üëã \s
                
                –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –∏–≥—Ä—ã –≤ *Steam* –∏ —Å–æ–æ–±—â–∏—Ç, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è. üéÆüî• \s
                
                üîπ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤—ã–±–µ—Ä–∏ *Steam* ‚Üí *–î–æ–±–∞–≤–∏—Ç—å*. \s
                üîπ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π ‚Äì *Steam* ‚Üí *–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å*. \s
                üîπ –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚Äì *Steam* ‚Üí *–£–¥–∞–ª–∏—Ç—å*. \s
                
                –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ *–∫–∏–Ω–æ–∞—Ñ–∏—à–∏ –ì–æ–º–µ–ª—è* üé¨ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ. \s
                
                üöÄ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–µ–º!
                
                """.formatted(name);
        sendMessage(chatId, answer);
    }

    private void sendMessage(Long chatId, String textToSend){
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(textToSend);
        sendMessage.setParseMode("Markdown");
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    //ReplyKeyboard
    public void sendKeyboardReplyKeyboard(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç:* \n\n" +
                "üé¨ *–§–∏–ª—å–º—ã* ‚Äì –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∏–Ω–æ–∞—Ñ–∏—à–∏ –≥–æ—Ä–æ–¥–∞ –ì–æ–º–µ–ª—å (–ø–æ–∫–∞ —á—Ç–æ).\n\n" +
                "üéÆ *Steam* ‚Äì –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –æ—Ç–º–µ—Ç–∫–∏.\n\n" +
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* ‚Äì –ü–æ–º–æ–≥—É—Ç –∫–æ–µ-—á—Ç–æ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
        );
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —ç–∫—Ä–∞–Ω

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–§–∏–ª—å–º—ã");
        row1.add("Steam");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");

        keyboardRows.add(row1);
        keyboardRows.add(row2);

        keyboardMarkup.setKeyboard(keyboardRows);

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //InlineKeyboard
    private void sendKeyboardSteam(long userId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(userId);
        sendMessage.setText(
                "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç:* \n\n" +
                "‚úÖ *–î–æ–±–∞–≤–∏—Ç—å* ‚Äì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω.\n\n" +
                "‚ùå *–£–¥–∞–ª–∏—Ç—å* ‚Äì –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.\n\n" +
                "üìã *–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å* ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π."
        );
        sendMessage.setParseMode("Markdown");

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> inlineKeyboard= new ArrayList<>();


        List<InlineKeyboardButton> row1 = new ArrayList<>();

        InlineKeyboardButton buttonAddGame = new InlineKeyboardButton();
        buttonAddGame.setText("–î–æ–±–∞–≤–∏—Ç—å");
        buttonAddGame.setCallbackData("add");

        InlineKeyboardButton buttonLookAtList = new InlineKeyboardButton();
        buttonLookAtList.setText("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å");
        buttonLookAtList.setCallbackData("look");

        InlineKeyboardButton buttonRemove = new InlineKeyboardButton();
        buttonRemove.setText("–£–¥–∞–ª–∏—Ç—å");
        buttonRemove.setCallbackData("delete");

        row1.add(buttonAddGame);
        row1.add(buttonRemove);
        row1.add(buttonLookAtList);

        inlineKeyboard.add(row1);

        inlineKeyboardMarkup.setKeyboard(inlineKeyboard);
        sendMessage.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(sendMessage);
        }
        catch (Exception e) {
            e.printStackTrace();
        }

    }


    @Override
    public void onUpdatesReceived(List<Update> updates) {
        super.onUpdatesReceived(updates);
    }

    @Override
    public void onRegister() {
        super.onRegister();
    }

    @Override
    public String getBotUsername() {
        return GetProperties.get(NAME_BOT);
    }

}
